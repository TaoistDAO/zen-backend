{
  "address": "0x29BB4f6734D79182985A17261B90D5606c8a9694",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryStorage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subsidyRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_helper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bond",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "BondCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tierCeilings",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "FeesAndTierCeilings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY_STORAGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSIDY_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_customTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "createBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "createBondAndTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tierCeilings",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        }
      ],
      "name": "setTiersAndFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierCeilings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferManagment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50b9c01abc5f56c9f0c3a8ff5037860416ea96e9a780c1056b7a89d3b25fde5a",
  "receipt": {
    "to": null,
    "from": "0xb10bcC8B508174c761CFB1E7143bFE37c4fBC3a1",
    "contractAddress": "0x29BB4f6734D79182985A17261B90D5606c8a9694",
    "transactionIndex": 31,
    "gasUsed": "5121987",
    "logsBloom": "0x
    "blockHash": "0xee65e3c4e3db54a3d3cf36e7aa3b5cdc678173595a2e9292972d686030ec3972",
    "transactionHash": "0x50b9c01abc5f56c9f0c3a8ff5037860416ea96e9a780c1056b7a89d3b25fde5a",
    "logs": [],
    "blockNumber": 9584332,
    "cumulativeGasUsed": "10789428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc3Ab493d0d06c700d9daF7Ea58aBBe12038ec474",
    "0x53BeF80E0EBE5A89dfb67782b12435aBeB943754",
    "0x6C2E68e0b227880F0D9D0817844a36Fbd345206f",
    "0x1A621BBd762a52b01c3eF070D3317c8589c37915",
    "0xb71cA59d21607D4A5B3809E21DB367Aba9Cf45BE"
  ],
  "solcInputHash": "29cdd399312fca3719ea5275a77f4a5e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subsidyRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"BondCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierCeilings\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"FeesAndTierCeilings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSIDY_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"createBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"createBondAndTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tierCeilings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"setTiersAndFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierCeilings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferManagment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBond(address,address,address,address)\":{\"params\":{\"_customTreasury\":\"address\",\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}},\"createBondAndTreasury(address,address,address)\":{\"params\":{\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}},\"setTiersAndFees(uint256[],uint256[])\":{\"params\":{\"_fees\":\"uint[]\",\"_tierCeilings\":\"uint[]\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBond(address,address,address,address)\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"},\"createBondAndTreasury(address,address,address)\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"},\"setTiersAndFees(uint256[],uint256[])\":{\"notice\":\"set fee for creating bond\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bonding/Factory.sol\":\"Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/bonding/CustomBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/Ownable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IHelper.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CustomBond is Ownable {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event BondCreated(uint256 deposit, uint256 payout, uint256 expires);\\n\\n    event BondRedeemed(address recipient, uint256 payout, uint256 remaining);\\n\\n    event BondPriceChanged(uint256 internalPrice, uint256 debtRatio);\\n\\n    event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment, bool addition);\\n\\n    event LPAdded(address lpAddress, uint256 lpAmount);\\n\\n    IERC20 public immutable PAYOUT_TOKEN; // token paid for principal\\n    ITreasury public immutable CUSTOM_TREASURY; // pays for and receives principal\\n    address public principalToken; // inflow token\\n    address public immutable DAO;\\n    address public immutable SUBSIDY_ROUTER; // pays subsidy in TAO to custom treasury\\n    address public OLY_TREASURY; // receives fee\\n    address public immutable HELPER; // helper for helping swap, lend to get lp token\\n    uint256 public totalPrincipalBonded;\\n    uint256 public totalPayoutGiven;\\n    uint256 public totalDebt; // total value of outstanding bonds; used for pricing\\n    uint256 public lastDecay; // reference block for debt decay\\n    uint256 public payoutSinceLastSubsidy; // principal accrued since subsidy paid\\n    Terms public terms; // stores terms for new bonds\\n    Adjust public adjustment; // stores adjustment to BCV data\\n    FeeTiers[] private feeTiers; // stores fee tiers\\n    bool public lpTokenAsFeeFlag;//\\n    bool public bondWithOneAssetFlag;\\n\\n    mapping(address => Bond) public bondInfo; // stores bond information for depositors\\n    \\n    struct FeeTiers {\\n        uint256 tierCeilings; // principal bonded till next tier\\n        uint256 fees; // in ten-thousandths (i.e. 33300 = 3.33%)\\n    }\\n\\n    // Info for creating new bonds\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 vestingTerm; // in blocks\\n        uint256 minimumPrice; // vs principal value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 maxDebt; // payout token decimal debt ratio, max % total supply created as debt\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // payout token remaining to be paid\\n        uint256 vesting; // Blocks left to vest\\n        uint256 lastBlock; // Last interaction\\n        uint256 truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct Adjust {\\n        bool add; // addition or subtraction\\n        uint256 rate; // increment\\n        uint256 target; // BCV when adjustment finished\\n        uint256 buffer; // minimum length (in blocks) between adjustments\\n        uint256 lastBlock; // block when last adjustment made\\n    }\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        address _customTreasury,\\n        address _payoutToken,\\n        address _principalToken,\\n        address _olyTreasury,\\n        address _subsidyRouter,\\n        address _initialOwner,\\n        address _dao,\\n        address _helper,\\n        uint256[] memory _tierCeilings,\\n        uint256[] memory _fees\\n    ) {\\n        require(_customTreasury != address(0), \\\"Factory: customTreasury must not be zero address\\\");\\n        CUSTOM_TREASURY = ITreasury(_customTreasury);\\n        require(_payoutToken != address(0), \\\"Factory: payoutToken must not be zero address\\\");\\n        PAYOUT_TOKEN = IERC20(_payoutToken);\\n        require(_principalToken != address(0), \\\"Factory: principalToken must not be zero address\\\");\\n        principalToken = _principalToken;\\n        require(_olyTreasury != address(0), \\\"Factory: olyTreasury must not be zero address\\\");\\n        OLY_TREASURY = _olyTreasury;\\n        require(_subsidyRouter != address(0), \\\"Factory: subsidyRouter must not be zero address\\\");\\n        SUBSIDY_ROUTER = _subsidyRouter;\\n        require(_initialOwner != address(0), \\\"Factory: initialOwner must not be zero address\\\");\\n        policy = _initialOwner;\\n        require(_dao != address(0), \\\"Factory: DAO must not be zero address\\\");\\n        DAO = _dao;\\n        require(_helper != address(0), \\\"Factory: helper must not be zero address\\\");\\n        HELPER = _helper;\\n        require(_tierCeilings.length == _fees.length, \\\"tier length and fee length not the same\\\");\\n\\n        for (uint256 i; i < _tierCeilings.length; i++) {\\n            feeTiers.push(FeeTiers({tierCeilings: _tierCeilings[i], fees: _fees[i]}));\\n        }\\n\\n        lpTokenAsFeeFlag = true;\\n    }\\n\\n    /* ======== INITIALIZATION ======== */\\n\\n    /**\\n     *  @notice initializes bond parameters\\n     *  @param _controlVariable uint\\n     *  @param _vestingTerm uint\\n     *  @param _minimumPrice uint\\n     *  @param _maxPayout uint\\n     *  @param _maxDebt uint\\n     *  @param _initialDebt uint\\n     */\\n    function initializeBond(\\n        uint256 _controlVariable,\\n        uint256 _vestingTerm,\\n        uint256 _minimumPrice,\\n        uint256 _maxPayout,\\n        uint256 _maxDebt,\\n        uint256 _initialDebt\\n    ) external onlyPolicy {\\n        require(_controlVariable == 0, \\\"_controlVariable must be 0 for initialization\\\");\\n        terms = Terms({\\n            controlVariable: _controlVariable,\\n            vestingTerm: _vestingTerm,\\n            minimumPrice: _minimumPrice,\\n            maxPayout: _maxPayout,\\n            maxDebt: _maxDebt\\n        });\\n        totalDebt = _initialDebt;\\n        lastDecay = block.number;\\n    }\\n\\n    /// @notice set control variable adjustment\\n    /// @param _lpTokenAsFeeFlag bool\\n    function setLPtokenAsFee(bool _lpTokenAsFeeFlag) external onlyPolicy {\\n        lpTokenAsFeeFlag = _lpTokenAsFeeFlag;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    enum PARAMETER {\\n        VESTING,\\n        PAYOUT,\\n        DEBT\\n    }\\n\\n    /**\\n     *  @notice set parameters for new bonds\\n     *  @param _parameter PARAMETER\\n     *  @param _input uint\\n     */\\n    function setBondTerms(PARAMETER _parameter, uint256 _input) external onlyPolicy {\\n        if (_parameter == PARAMETER.VESTING) {// 0            \\n            require(_input >= 10000, \\\"Vesting must be longer than 36 hours\\\");\\n            terms.vestingTerm = _input;\\n        } else if (_parameter == PARAMETER.PAYOUT) {// 1            \\n            require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n            terms.maxPayout = _input;\\n        } else if (_parameter == PARAMETER.DEBT) {// 2            \\n            terms.maxDebt = _input;\\n        }\\n    }\\n\\n    /**\\n     *  @notice set control variable adjustment\\n     *  @param _addition bool\\n     *  @param _increment uint\\n     *  @param _target uint\\n     *  @param _buffer uint\\n     */\\n    function setAdjustment(\\n        bool _addition,\\n        uint256 _increment,\\n        uint256 _target,\\n        uint256 _buffer\\n    ) external onlyPolicy {\\n        require(_increment <= terms.controlVariable.mul(30).div(1000), \\\"Increment too large\\\");\\n\\n        adjustment = Adjust({\\n            add: _addition,\\n            rate: _increment,\\n            target: _target,\\n            buffer: _buffer,\\n            lastBlock: block.number\\n        });\\n    }\\n\\n    /**\\n     *  @notice change address of Treasury\\n     *  @param _olyTreasury uint\\n     */\\n    function changeOlyTreasury(address _olyTreasury) external {\\n        require(msg.sender == DAO, \\\"changeOlyTreasury: Only DAO can replace OLY_TREASURY\\\");\\n        OLY_TREASURY = _olyTreasury;\\n    }\\n\\n    /**\\n     *  @notice subsidy controller checks payouts since last subsidy and resets counter\\n     *  @return payoutSinceLastSubsidy_ uint\\n     */\\n    function paySubsidy() external returns (uint256 payoutSinceLastSubsidy_) {\\n        require(msg.sender == SUBSIDY_ROUTER, \\\"Only subsidy controller\\\");\\n\\n        payoutSinceLastSubsidy_ = payoutSinceLastSubsidy;\\n        payoutSinceLastSubsidy = 0;\\n    }\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n\\n        return __deposit(_amount, _maxPrice, principalToken, _depositor, true);        \\n    }\\n\\n    /**\\n     *  @notice deposit bond with an asset(i.e: USDT)\\n     *  @param _depositAmount amount of deposit asset \\n     *  @param _depositAsset deposit asset\\n     *  @param _incomingAsset asset address for swap from deposit asset\\n     *  @param _depositor address of depositor\\n     *  @return uint\\n     */\\n    function depositWithAsset(\\n        uint256 _depositAmount,\\n        uint256 _maxPrice,\\n        address _depositAsset,\\n        address _incomingAsset,\\n        address _depositor\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"depositWithAsset: Invalid depositor\\\");        \\n\\n        (address lpAddress, uint256 lpAmount) = __lpAddressAndAmount(_depositAmount, _depositAsset, _incomingAsset);\\n\\n        // remain payoutToken is transferred to user\\n        __transferAssetToCaller(msg.sender, address(PAYOUT_TOKEN));\\n        \\n        require(lpAddress != address(0), \\\"depositWithAsset: Invalid lpAddress\\\");\\n\\n        require(lpAmount > 0, \\\"depositWithAsset: Insufficient lpAmount\\\");\\n\\n        return __deposit(lpAmount, _maxPrice, lpAddress, _depositor, false);\\n    }\\n\\n    \\n    /// @notice internal process of deposit()\\n    /// @param _lpAmount amount of principleToken \\n    /// @param _maxPrice amount \\n    /// @param _lpAddress principleToken\\n    /// @param _depositor address of depositor\\n    /// @param _flag if deposit(), true and if depositWithAsset(), false\\n    /// @return uint\\n    function __deposit(\\n        uint256 _lpAmount,\\n        uint256 _maxPrice,\\n        address _lpAddress,\\n        address _depositor,\\n        bool _flag\\n    ) internal returns (uint256) {\\n        decayDebt();\\n        require(totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\");\\n\\n        uint256 nativePrice = trueBondPrice();\\n\\n        require(_maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\"); // slippage protection\\n\\n        uint256 value = CUSTOM_TREASURY.valueOfToken(_lpAddress, _lpAmount);\\n        uint256 payout = _payoutFor(value); // payout to bonder is computed\\n\\n        require(payout >= 10**PAYOUT_TOKEN.decimals() / 100, \\\"Bond too small\\\"); // must be > 0.01 payout token ( underflow protection )\\n        console.log(\\\"===sol-payout::\\\", payout);\\n        require(payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n        \\n        console.log(\\\"===sol-payout-1::\\\", \\\"ok\\\");\\n        /**\\n            principal is transferred in\\n            approved and\\n            deposited into the treasury, returning (_amount - profit) payout token\\n         */\\n         if(_flag) {\\n            IERC20(_lpAddress).safeTransferFrom(msg.sender, address(this), _lpAmount);\\n         }\\n\\n        // profits are calculated\\n        uint256 fee;\\n        /**\\n            principal is been taken as fee\\n            and trasfered to dao\\n         */\\n        if (lpTokenAsFeeFlag) {\\n            fee = _lpAmount.mul(currentFluxFee()).div(1e6);\\n            if (fee != 0) {\\n                IERC20(_lpAddress).transfer(OLY_TREASURY, fee);\\n            }\\n        } else {\\n            fee = payout.mul(currentFluxFee()).div(1e6);\\n        }\\n        \\n        IERC20(_lpAddress).approve(address(CUSTOM_TREASURY), _lpAmount);\\n        CUSTOM_TREASURY.deposit(_lpAddress, _lpAmount.sub(fee), payout);\\n\\n        if (!lpTokenAsFeeFlag && fee != 0) { // fee is transferred to dao \\n            PAYOUT_TOKEN.transfer(OLY_TREASURY, fee);\\n        }\\n\\n        // total debt is increased\\n        totalDebt = totalDebt.add(value);                \\n\\n        // depositor info is stored\\n        if(lpTokenAsFeeFlag){\\n            bondInfo[_depositor] = Bond({ \\n                payout: bondInfo[_depositor].payout.add(payout),\\n                vesting: terms.vestingTerm,\\n                lastBlock: block.number,\\n                truePricePaid: trueBondPrice()\\n            });\\n        } else {\\n            bondInfo[_depositor] = Bond({ \\n                payout: bondInfo[_depositor].payout.add(payout.sub(fee)),\\n                vesting: terms.vestingTerm,\\n                lastBlock: block.number,\\n                truePricePaid: trueBondPrice()\\n            });\\n        }        \\n  \\n        // indexed events are emitted\\n        emit BondCreated(_lpAmount, payout, block.number.add(terms.vestingTerm));\\n        emit BondPriceChanged(_bondPrice(), debtRatio());\\n\\n        totalPrincipalBonded = totalPrincipalBonded.add(_lpAmount); // total bonded increased\\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\\n        payoutSinceLastSubsidy = payoutSinceLastSubsidy.add(payout); // subsidy counter increased\\n     \\n        adjust(); // control variable is adjusted\\n        return payout;\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @return uint\\n     */ \\n    function redeem(address _depositor) external returns (uint) {\\n        Bond memory info = bondInfo[_depositor];\\n        \\n        uint percentVested = percentVestedFor(_depositor); // (blocks since last interaction / vesting term remaining)\\n        \\n        if (percentVested >= 10000) { // if fully vested\\n            delete bondInfo[_depositor]; // delete user info\\n            emit BondRedeemed(_depositor, info.payout, 0); // emit bond data\\n\\n            if(info.payout > 0) {\\n                PAYOUT_TOKEN.transfer(_depositor, info.payout);\\n            }\\n\\n            return info.payout;\\n        } else { // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n\\n            // store updated deposit info\\n            bondInfo[_depositor] = Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(block.number.sub(info.lastBlock)),\\n                lastBlock: block.number,\\n                truePricePaid: info.truePricePaid\\n            });\\n\\n            emit BondRedeemed(_depositor, payout, bondInfo[_depositor].payout);\\n\\n            if(payout > 0) {\\n                PAYOUT_TOKEN.transfer(_depositor, payout);\\n            }\\n\\n            return payout;\\n        }\\n    }\\n\\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n    /// @notice makes incremental adjustment to control variable\\n    function adjust() internal {\\n        uint256 blockCanAdjust = adjustment.lastBlock.add(adjustment.buffer);\\n        if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\\n            uint256 initial = terms.controlVariable;\\n            if (adjustment.add) {\\n                terms.controlVariable = terms.controlVariable.add(adjustment.rate);\\n                if (terms.controlVariable >= adjustment.target) {\\n                    adjustment.rate = 0;\\n                }\\n            } else {\\n                terms.controlVariable = terms.controlVariable.sub(adjustment.rate);\\n                if (terms.controlVariable <= adjustment.target) {\\n                    adjustment.rate = 0;\\n                }\\n            }\\n            adjustment.lastBlock = block.number;\\n            emit ControlVariableAdjustment(initial, terms.controlVariable, adjustment.rate, adjustment.add);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt() internal {\\n        totalDebt = totalDebt.sub(debtDecay());\\n        lastDecay = block.number;\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice() internal returns (uint256 price_) {\\n        price_ = terms.controlVariable.mul(debtRatio()).div(10**(uint256(PAYOUT_TOKEN.decimals()).sub(5)));\\n        if (price_ < terms.minimumPrice) {\\n            price_ = terms.minimumPrice;\\n        } else if (terms.minimumPrice != 0) {\\n            terms.minimumPrice = 0;\\n        }\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice() public view returns (uint256 price_) {\\n        price_ = terms.controlVariable.mul(debtRatio()).div(10**(uint256(PAYOUT_TOKEN.decimals()).sub(5)));\\n        if (price_ < terms.minimumPrice) {\\n            price_ = terms.minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate true bond price a user pays\\n     *  @return price_ uint\\n     */\\n    function trueBondPrice() public view returns (uint256 price_) {\\n        price_ = bondPrice().add(bondPrice().mul(currentFluxFee()).div(1e6));\\n    }\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout() public view returns (uint) {\\n        uint256 totalSupply = PAYOUT_TOKEN.totalSupply();\\n        if(totalSupply > 10**18*10**PAYOUT_TOKEN.decimals()) totalSupply = 10**18*10**PAYOUT_TOKEN.decimals();\\n        return totalSupply.mul(terms.maxPayout).div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate total interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function _payoutFor(uint256 _value) internal view returns (uint256) {\\n        return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e11);\\n    }\\n\\n    /**\\n     *  @notice calculate user's interest due for new bond, accounting for Flux Fee\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value) external view returns (uint256) {\\n        uint256 total = FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e11);\\n        return total.sub(total.mul(currentFluxFee()).div(1e6));\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to payout token supply\\n     *  @notice protocols using Flux Pro should be careful when quickly adding large %s to total supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio() public view returns (uint256 debtRatio_) {\\n        debtRatio_ = FixedPoint\\n            .fraction(currentDebt().mul(10**PAYOUT_TOKEN.decimals()), PAYOUT_TOKEN.totalSupply())\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt() public view returns (uint256) {\\n        return totalDebt.sub(debtDecay());\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay() public view returns (uint256 decay_) {\\n        uint256 blocksSinceLast = block.number.sub(lastDecay);\\n        decay_ = totalDebt.mul(blocksSinceLast).div(terms.vestingTerm);\\n        if (decay_ > totalDebt) {\\n            decay_ = totalDebt;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor) public view returns (uint256 percentVested_) {\\n        Bond memory bond = bondInfo[_depositor];\\n        uint256 blocksSinceLast = block.number.sub(bond.lastBlock);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = blocksSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of payout token available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor) external view returns (uint256 pendingPayout_) {\\n        uint256 percentVested = percentVestedFor(_depositor);\\n        uint256 payout = bondInfo[_depositor].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice current fee Flux takes of each bond\\n     *  @return currentFee_ uint\\n     */\\n    function currentFluxFee() public view returns (uint256 currentFee_) {\\n        uint256 tierLength = feeTiers.length;\\n        for (uint256 i; i < tierLength; i++) {\\n            if (totalPrincipalBonded < feeTiers[i].tierCeilings || i == tierLength - 1) {\\n                return feeTiers[i].fees;\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the caller\\n    function __transferAssetToCaller(address _target, address _asset) private {\\n        uint256 transferAmount = IERC20(_asset).balanceOf(address(this));\\n        if (transferAmount > 0) {\\n            IERC20(_asset).safeTransfer(_target, transferAmount);\\n        }\\n    }\\n\\n    /// @notice Swap and AddLiquidity on the UniswapV2\\n    function __lpAddressAndAmount(\\n        uint256 _depositAmount,\\n        address _depositAsset,\\n        address _incomingAsset\\n    ) public payable returns (address lpAddress_, uint256 lpAmount_) {      \\n\\n        if(_depositAsset == address(0)) {//ETH\\n            payable(address(HELPER)).transfer(address(this).balance);\\n        } else {\\n            IERC20(_depositAsset).safeTransferFrom(msg.sender, address(this), _depositAmount);\\n\\n            IERC20(_depositAsset).approve(address(HELPER), _depositAmount);\\n        }\\n\\n        bytes memory swapArgs = abi.encode(_depositAmount, _depositAsset, address(PAYOUT_TOKEN), _incomingAsset);        \\n\\n        (lpAddress_, lpAmount_) = IHelper(HELPER).swapForDeposit(swapArgs);    \\n\\n        emit LPAdded(lpAddress_, lpAmount_);      \\n    }\\n}\\n\",\"keccak256\":\"0x91e79c488bbc2b34d9f1cf5648b020c55a3a2226c90a725f528ed7e30ea91fcd\",\"license\":\"GPL-3.0\"},\"src/bonding/CustomTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/Ownable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CustomTreasury is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public immutable payoutToken;\\n\\n    mapping(address => bool) public bondContract;\\n\\n    event BondContractToggled(address bondContract, bool approved);\\n\\n    event Withdraw(address token, address destination, uint256 amount);\\n\\n    constructor(address _payoutToken, address _initialOwner) {\\n        require(_payoutToken != address(0), \\\"CustomTreasury: payoutToken must not be zero address\\\");\\n        payoutToken = _payoutToken;\\n        require(_initialOwner != address(0), \\\"CustomTreasury: initialOwner must not be zero address\\\");\\n        policy = _initialOwner;\\n    }\\n\\n    /* ======== BOND CONTRACT FUNCTION ======== */\\n\\n    /**\\n     *  @notice deposit principle token and recieve back payout token\\n     *  @param _principleTokenAddress address\\n     *  @param _amountPrincipleToken uint\\n     *  @param _amountPayoutToken uint\\n     */\\n    function deposit(\\n        address _principleTokenAddress,\\n        uint256 _amountPrincipleToken,\\n        uint256 _amountPayoutToken\\n    ) external {\\n        require(bondContract[msg.sender], \\\"msg.sender is not a bond contract\\\");\\n        IERC20(_principleTokenAddress).safeTransferFrom(msg.sender, address(this), _amountPrincipleToken);\\n        \\n        require(IERC20(payoutToken).balanceOf(address(this)) >= _amountPayoutToken, \\\"deposit: Insufficient payoutToken balance\\\");\\n        IERC20(payoutToken).safeTransfer(msg.sender, _amountPayoutToken);\\n    }\\n\\n    /* ======== VIEW FUNCTION ======== */\\n\\n    /**\\n     *   @notice returns payout token valuation of priciple\\n     *   @param _principleTokenAddress address\\n     *   @param _amount uint\\n     *   @return value_ uint\\n     */\\n    function valueOfToken(address _principleTokenAddress, uint256 _amount) public view returns (uint256 value_) {\\n        // convert amount to match payout token decimals\\n        value_ = _amount.mul(10**IERC20(payoutToken).decimals()).div(10**IERC20(_principleTokenAddress).decimals());\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice policy can withdraw ERC20 token to desired address\\n     *  @param _token uint\\n     *  @param _destination address\\n     *  @param _amount uint\\n     */\\n    function withdraw(\\n        address _token,\\n        address _destination,\\n        uint256 _amount\\n    ) external onlyPolicy {\\n        IERC20(_token).safeTransfer(_destination, _amount);\\n\\n        emit Withdraw(_token, _destination, _amount);\\n    }\\n\\n    /**\\n        @notice toggle bond contract\\n        @param _bondContract address\\n     */\\n    function toggleBondContract(address _bondContract) external onlyPolicy {\\n        bondContract[_bondContract] = !bondContract[_bondContract];\\n\\n        emit BondContractToggled(_bondContract, bondContract[_bondContract]);\\n    }\\n}\\n\",\"keccak256\":\"0x92858daffa785021b2dc1dd8ca1693ed5d52324ed5c445449f319ea235060001\",\"license\":\"GPL-3.0\"},\"src/bonding/Factory.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/Ownable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"./CustomBond.sol\\\";\\nimport \\\"./CustomTreasury.sol\\\";\\nimport \\\"../interfaces/IFactoryStorage.sol\\\";\\n\\ncontract Factory is Ownable {    \\n    using SafeMath for uint256;\\n\\n    address immutable public TREASURY;\\n    address immutable public FACTORY_STORAGE;\\n    address immutable public SUBSIDY_ROUTER;\\n    address immutable public DAO;\\n    address immutable public HELPER;\\n    \\n    uint256[] public tierCeilings; \\n    uint256[] public fees;\\n\\n    event BondCreation(address treasury, address bond, address _initialOwner);\\n\\n    event FeesAndTierCeilings(uint256[] tierCeilings, uint256[] fees);\\n\\n    constructor(\\n        address _treasury,\\n        address _factoryStorage,\\n        address _subsidyRouter,\\n        address _dao,\\n        address _helper\\n    ) {\\n        require(_treasury != address(0), \\\"Factory: treasury must not be zero address\\\");\\n        TREASURY = _treasury;\\n        require(_factoryStorage != address(0), \\\"Factory: factoryStorage must not be zero address\\\");\\n        FACTORY_STORAGE = _factoryStorage;\\n        require(_subsidyRouter != address(0), \\\"Factory: subsidyRouter must not be zero address\\\");\\n        SUBSIDY_ROUTER = _subsidyRouter;\\n        require(_dao != address(0), \\\"Factory: dao must not be zero address\\\");\\n        DAO = _dao;\\n        require(_helper != address(0), \\\"Factory: helper must not be zero address\\\");\\n        HELPER = _helper;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBondAndTreasury(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _initialOwner\\n    ) external returns (address _treasury, address _bond) {\\n        require(fees.length > 0, \\\"createBondAndTreasury: fees must be setup\\\");\\n\\n        CustomTreasury customTreasury = new CustomTreasury(_payoutToken, _initialOwner);\\n        CustomBond customBond = new CustomBond(\\n            address(customTreasury), \\n            _payoutToken, \\n            _principleToken, \\n            TREASURY, \\n            SUBSIDY_ROUTER, \\n            _initialOwner, \\n            DAO, \\n            HELPER,\\n            tierCeilings, \\n            fees\\n        );\\n\\n        emit BondCreation(address(customTreasury), address(customBond), _initialOwner);\\n\\n        return IFactoryStorage(FACTORY_STORAGE).pushBond(\\n            _payoutToken, \\n            _principleToken, \\n            address(customTreasury), \\n            address(customBond), \\n            _initialOwner, \\n            tierCeilings, \\n            fees\\n        );\\n    }\\n\\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _customTreasury address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBond(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _customTreasury,\\n        address _initialOwner\\n    ) external returns (address _treasury, address _bond) {\\n        require(fees.length > 0, \\\"createBond: fees must be setup\\\");\\n\\n        CustomBond bond = new CustomBond(\\n            _customTreasury, \\n            _payoutToken, \\n            _principleToken, \\n            _customTreasury, \\n            SUBSIDY_ROUTER, \\n            _initialOwner, \\n            DAO, \\n            HELPER,\\n            tierCeilings, \\n            fees\\n        );\\n\\n        emit BondCreation(_customTreasury, address(bond), _initialOwner);\\n\\n        return\\n            IFactoryStorage(FACTORY_STORAGE).pushBond(\\n                _payoutToken,\\n                _principleToken,\\n                _customTreasury,\\n                address(bond),\\n                _initialOwner,\\n                tierCeilings,\\n                fees\\n            );\\n    }\\n\\n    /**\\n     *  @notice set fee for creating bond\\n     *  @param _tierCeilings uint[]\\n     *  @param _fees uint[]\\n     */\\n    function setTiersAndFees(\\n        uint256[] calldata _tierCeilings, \\n        uint256[] calldata _fees\\n    ) external onlyPolicy {\\n        require(_tierCeilings.length == _fees.length, \\\"setTiersAndFees: tier length and fee length must be same\\\");\\n\\n        uint256 feeSum = 0;\\n        for (uint256 i; i < _fees.length; i++) {\\n            feeSum = feeSum.add(_fees[i]);\\n        }\\n        \\n        require(feeSum > 0, \\\"setTiersAndFees: fee must greater than 0\\\");\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            tierCeilings.push(_tierCeilings[i]);\\n            fees.push(_fees[i]);\\n        }\\n\\n        emit FeesAndTierCeilings(_tierCeilings, _fees);\\n    }\\n}\\n\",\"keccak256\":\"0x65bb4a5664889e3b0f6bae681ac963f30eba92d74c756096f08123e7e602e524\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xffff7ea2181d88112fddeb2f098b011d90424fe057bd050a5b5b591d95650db4\",\"license\":\"GPL-3.0\"},\"src/interfaces/IFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @title IFactoryStorage Interface\\ninterface IFactoryStorage {\\n    function pushBond(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _customTreasury,\\n        address _customBond,\\n        address _initialOwner,\\n        uint256[] calldata _tierCeilings,\\n        uint256[] calldata _fees\\n    ) external returns (address _treasury, address _bond);\\n}\\n\",\"keccak256\":\"0x7890b14e5eabf8e97c6c76956cab9fab12537eb703a6e4b09d899be60c459b87\",\"license\":\"GPL-3.0\"},\"src/interfaces/IHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @notice Interface for Helper\\ninterface IHelper {\\n\\n    function swapForDeposit(\\n        bytes calldata _swapArgs\\n    ) external returns (address lpAddress_, uint256 lpAmount_);\\n\\n}\\n\",\"keccak256\":\"0xd73bf2571ca659c4292f3a73c7b6867f8d230321cdc2a725df5f1a7ffb35ee59\",\"license\":\"GPL-3.0\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @title CustomTreasury Interface\\ninterface ITreasury {\\n    function deposit(\\n        address _principleTokenAddress,\\n        uint256 _amountPrincipleToken,\\n        uint256 _amountPayoutToken\\n    ) external;\\n\\n    function valueOfToken(address _principleTokenAddress, uint256 _amount) external view returns (uint256 value_);\\n}\\n\",\"keccak256\":\"0xe03892835e49035bfe5b3087b780bfb58e12cafabb88e9654d4f69164bb8c841\",\"license\":\"GPL-3.0\"},\"src/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory _hex = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = \\\"0\\\";\\n        _addr[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            _addr[2 + i * 2] = _hex[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3 + i * 2] = _hex[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0269cbe46fd8c8ddff0491844d59388d63481537b9708d84016f053bbabf7620\",\"license\":\"GPL-3.0\"},\"src/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xded3b649ee5f7cc2815663310f83737ba60b2cfb6037258d14e80a2bea54903b\",\"license\":\"GPL-3.0\"},\"src/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x0078319625a767fbf35881e235245d8543f0f0b5ae30179258aa00c360a1d4fc\",\"license\":\"GPL-3.0\"},\"src/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/Babylonian.sol\\\";\\nimport \\\"../libraries/BitMath.sol\\\";\\n\\nlibrary FixedPoint {\\n    struct Uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct Uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(Uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(Uq112x112 memory self) internal pure returns (uint256) {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (Uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.Uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return Uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return Uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a Uq112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(Uq112x112 memory self) internal pure returns (Uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return Uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return Uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x7692d27d46b33e6c3f2a0176420e2dc2e26da56786401847ed7e6a5827fda92f\",\"license\":\"GPL-3.0\"},\"src/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 k, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        k = x * y;\\n        h = mm - k;\\n        if (mm < k) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 k,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        k /= pow2;\\n        k += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return k * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 k, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > k) h -= 1;\\n        k -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(k, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xa5032dc64565f497bbf7be164401de83a72bb8a6964e6ff30921ad52589e6198\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7e973b7df6348ae8dc725c39d735946a2f200dd8077295a583156c56c159542\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d4a7d568edc5f572551495050789eb8e6d766a737cf3eaffee4508426da2518\",\"license\":\"GPL-3.0\"},\"src/types/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Ownable {\\n    address public policy;\\n\\n    constructor() {\\n        policy = msg.sender;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == policy, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function transferManagment(address _newOwner) external onlyPolicy {\\n        require(_newOwner != address(0), \\\"Ownable: newOwner must not be zero address\\\");\\n        policy = _newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa66688477e37bbb3b5fd7b49774fc6408325bb43066968ae364dd3bf1dfb3ed1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b5060405162005ee338038062005ee3833981810160405260a081101561003657600080fd5b508051602082015160408301516060840151608090940151600080546001600160a01b03191633179055929391929091906001600160a01b0385166100ad5760405162461bcd60e51b815260040180806020018281038252602a81526020018062005e35602a913960400191505060405180910390fd5b6001600160601b0319606086901b166080526001600160a01b0384166101055760405162461bcd60e51b815260040180806020018281038252603081526020018062005eb36030913960400191505060405180910390fd5b6001600160601b0319606085901b1660a0526001600160a01b03831661015d5760405162461bcd60e51b815260040180806020018281038252602f81526020018062005e5f602f913960400191505060405180910390fd5b6001600160601b0319606084901b1660c0526001600160a01b0382166101b55760405162461bcd60e51b815260040180806020018281038252602581526020018062005e8e6025913960400191505060405180910390fd5b6001600160601b0319606083901b1660e0526001600160a01b03811661020d5760405162461bcd60e51b815260040180806020018281038252602881526020018062005e0d6028913960400191505060405180910390fd5b6001600160601b031960609190911b16610100525050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c615b6c620002a16000398061045652806109785280610ee652508061043552806109575280610c8e52508061041352806109355280610c6a52508061038f52806106075280610b2952508061036b52806109145250615b6c6000f3fe60806040523480156200001157600080fd5b5060043610620000e85760003560e01c80634acc79ed116200008d57806398fabd3a116200006357806398fabd3a1462000259578063e9b9fb621462000263578063f551bf20146200032e57620000e8565b80634acc79ed14620001f45780634d9793bc146200021457806375796e77146200024f57620000e8565b80632e63f2e811620000c35780632e63f2e8146200014f578063321c920b14620001595780633bfdd7de14620001c957620000e8565b80630505c8c914620000ed578063102a7c7d14620001135780632d2c55651462000145575b600080fd5b620000f762000338565b604080516001600160a01b039092168252519081900360200190f35b62000133600480360360208110156200012b57600080fd5b503562000347565b60408051918252519081900360200190f35b620000f762000369565b620000f76200038d565b6200019a600480360360808110156200017157600080fd5b506001600160a01b038135811691602081013582169160408201358116916060013516620003b1565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b620001f260048036036020811015620001e157600080fd5b50356001600160a01b03166200078d565b005b62000133600480360360208110156200020c57600080fd5b50356200086e565b6200019a600480360360608110156200022c57600080fd5b506001600160a01b0381358116916020810135821691604090910135166200087f565b620000f762000c68565b620000f762000c8c565b620001f2600480360360408110156200027b57600080fd5b8101906020810181356401000000008111156200029757600080fd5b820183602082011115620002aa57600080fd5b80359060200191846020830284011164010000000083111715620002cd57600080fd5b919390929091602081019035640100000000811115620002ec57600080fd5b820183602082011115620002ff57600080fd5b803590602001918460208302840111640100000000831117156200032257600080fd5b50909250905062000cb0565b620000f762000ee4565b6000546001600160a01b031681565b600181815481106200035857600080fd5b600091825260209091200154905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025460009081906200040b576040805162461bcd60e51b815260206004820152601e60248201527f637265617465426f6e643a2066656573206d7573742062652073657475700000604482015290519081900360640190fd5b6000848787877f0000000000000000000000000000000000000000000000000000000000000000887f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016002604051620004879062000f6a565b808b6001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b03168152602001806020018060200183810383528581815481526020019150805480156200054757602002820191906000526020600020905b81548152602001906001019080831162000532575b505083810382528481815481526020019150805480156200058857602002820191906000526020600020905b81548152602001906001019080831162000573575b50509c50505050505050505050505050604051809103906000f080158015620005b5573d6000803e3d6000fd5b50604080516001600160a01b038089168252808416602083015287168183015290519192507f34c882c38c88d2da38fac8717334976b41c856bc28585db7383e4835d2cc73cf919081900360600190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e8dbe248888888589600160026040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b0316815260200180602001806020018381038352858181548152602001915080548015620006e257602002820191906000526020600020905b815481526020019060010190808311620006cd575b505083810382528481815481526020019150805480156200072357602002820191906000526020600020905b8154815260200190600101908083116200070e575b505099505050505050505050506040805180830381600087803b1580156200074a57600080fd5b505af11580156200075f573d6000803e3d6000fd5b505050506040513d60408110156200077657600080fd5b508051602090910151909890975095505050505050565b6000546001600160a01b03163314620007ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620008345760405162461bcd60e51b815260040180806020018281038252602a81526020018062005b0d602a913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600281815481106200035857600080fd5b6002546000908190620008c45760405162461bcd60e51b815260040180806020018281038252602981526020018062005ae46029913960400191505060405180910390fd5b60008584604051620008d69062000f78565b6001600160a01b03928316815291166020820152604080519182900301906000f0801580156200090a573d6000803e3d6000fd5b50905060008187877f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000897f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016002604051620009a99062000f6a565b808b6001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b031681526020018060200180602001838103835285818154815260200191508054801562000a6957602002820191906000526020600020905b81548152602001906001019080831162000a54575b5050838103825284818154815260200191508054801562000aaa57602002820191906000526020600020905b81548152602001906001019080831162000a95575b50509c50505050505050505050505050604051809103906000f08015801562000ad7573d6000803e3d6000fd5b50604080516001600160a01b038086168252808416602083015288168183015290519192507f34c882c38c88d2da38fac8717334976b41c856bc28585db7383e4835d2cc73cf919081900360600190a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e8dbe24888885858a600160026040518863ffffffff1660e01b815260040180886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b0316815260200180602001806020018381038352858181548152602001915080548015620006e25760200282019190600052602060002090815481526020019060010190808311620006cd57505083810382528481815481526020019150805480156200072357602002820191906000526020600020908154815260200190600101908083116200070e57505099505050505050505050506040805180830381600087803b1580156200074a57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331462000d10576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b82811462000d505760405162461bcd60e51b815260040180806020018281038252603881526020018062005aac6038913960400191505060405180910390fd5b6000805b8281101562000d905762000d8584848381811062000d6e57fe5b905060200201358362000f0890919063ffffffff16565b915060010162000d54565b506000811162000dd25760405162461bcd60e51b815260040180806020018281038252602881526020018062005a846028913960400191505060405180910390fd5b60005b8281101562000e4957600186868381811062000ded57fe5b83546001810185556000948552602094859020919094029290920135919092015550600284848381811062000e1e57fe5b8354600180820186556000958652602095869020929095029390930135920191909155500162000dd5565b507f7170399ecd66b5be3ad09fa69bb2f47cce8c6d7e055d71fdf154450f7b549821858585856040518080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039850909650505050505050a15050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008282018381101562000f63576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b613c5b8062000f8783390190565b610ea28062004be28339019056fe6101206040523480156200001257600080fd5b5060405162003c5b38038062003c5b83398181016040526101408110156200003957600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0180519751999b989a969995989497939692959194919392820192846401000000008211156200009257600080fd5b908301906020820185811115620000a857600080fd5b8251866020820283011164010000000082111715620000c657600080fd5b82525081516020918201928201910280838360005b83811015620000f5578181015183820152602001620000db565b50505050905001604052602001805160405193929190846401000000008211156200011f57600080fd5b9083019060208201858111156200013557600080fd5b82518660208202830111640100000000821117156200015357600080fd5b82525081516020918201928201910280838360005b838110156200018257818101518382015260200162000168565b50505050919091016040525050600080546001600160a01b0319163317905550506001600160a01b038a16620001ea5760405162461bcd60e51b815260040180806020018281038252603081526020018062003b7a6030913960400191505060405180910390fd5b6001600160601b031960608b901b1660a0526001600160a01b038916620002435760405162461bcd60e51b815260040180806020018281038252602d81526020018062003b1f602d913960400191505060405180910390fd5b6001600160601b031960608a901b166080526001600160a01b0388166200029c5760405162461bcd60e51b815260040180806020018281038252603081526020018062003c2b6030913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b038a8116919091179091558716620002fb5760405162461bcd60e51b815260040180806020018281038252602d81526020018062003bcf602d913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b038981169190911790915586166200035a5760405162461bcd60e51b815260040180806020018281038252602f81526020018062003bfc602f913960400191505060405180910390fd5b6001600160601b0319606087901b1660e0526001600160a01b038516620003b35760405162461bcd60e51b815260040180806020018281038252602e81526020018062003b4c602e913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b03878116919091179091558416620004125760405162461bcd60e51b815260040180806020018281038252602581526020018062003baa6025913960400191505060405180910390fd5b6001600160601b0319606085901b1660c0526001600160a01b0383166200046b5760405162461bcd60e51b815260040180806020018281038252602881526020018062003ad06028913960400191505060405180910390fd5b6001600160601b0319606084901b16610100528051825114620004c05760405162461bcd60e51b815260040180806020018281038252602781526020018062003af86027913960400191505060405180910390fd5b60005b82518110156200053b5760126040518060400160405280858481518110620004e757fe5b602002602001015181526020018484815181106200050157fe5b60209081029190910181015190915282546001818101855560009485529382902083516002909202019081559101519082015501620004c3565b50506013805460ff1916600117905550505050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6134c56200060b60003980610bde5280610c525280610d7c5280611da55250806112835280611805525080610eac52806116e3525080610fb652806120da52806124785280612514525080610d0252806111bf5280611482528061162c52806118c4528061195752806119fd5280611ac85280611b815280611c0d5280611cc2528061218c52806125ee5280612e4a52506134c56000f3fe6080604052600436106102a45760003560e01c80637cbe044c1161016e578063d5025625116100cb578063e392a2621161007f578063f551bf2011610064578063f551bf2014610868578063f5c2ab5b1461087d578063fc7b9c1814610892576102ab565b8063e392a2621461083e578063f4c10ba814610853576102ab565b8063dbc162de116100b0578063dbc162de146107ff578063e0176de814610814578063e2f6f51114610829576102ab565b8063d5025625146107aa578063d7ccfb0b146107ea576102ab565b80639f8c657b11610122578063a9bc6b7111610107578063a9bc6b7114610727578063cd1234b31461073c578063cea55f5714610795576102ab565b80639f8c657b146106ca578063a50603b2146106df576102ab565b806395a2251f1161015357806395a2251f1461066d57806396624297146106a057806398fabd3a146106b5576102ab565b80637cbe044c146106195780638dbdbe6d1461062e576102ab565b80633340ed851161021c578063507930ec116101d057806375796e77116101b557806375796e77146105c5578063759076e5146105da5780637927ebf8146105ef576102ab565b8063507930ec146105415780635668338614610574576102ab565b80633a301b2a116102015780633a301b2a146104b75780633bfdd7de146104cc578063451ee4a1146104ff576102ab565b80633340ed851461045857806334b8e4751461048b576102ab565b80631a3d0068116102735780631e321a0f116102585780631e321a0f146103b95780631ed4a869146103ec5780632bab6bde14610443576102ab565b80631a3d0068146103505780631ba7182a14610390576102ab565b806301a84a1b146102b057806301b88ee8146102d75780630505c8c91461030a5780630a7484891461033b576102ab565b366102ab57005b600080fd5b3480156102bc57600080fd5b506102c56108a7565b60408051918252519081900360200190f35b3480156102e357600080fd5b506102c5600480360360208110156102fa57600080fd5b50356001600160a01b03166108ad565b34801561031657600080fd5b5061031f610906565b604080516001600160a01b039092168252519081900360200190f35b34801561034757600080fd5b506102c5610915565b34801561035c57600080fd5b5061038e6004803603608081101561037357600080fd5b5080351515906020810135906040810135906060013561094d565b005b34801561039c57600080fd5b506103a5610a61565b604080519115158252519081900360200190f35b3480156103c557600080fd5b5061038e600480360360408110156103dc57600080fd5b5060ff8135169060200135610a6f565b6104206004803603606081101561040257600080fd5b508035906001600160a01b0360208201358116916040013516610bc0565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561044f57600080fd5b506102c5610e9b565b34801561046457600080fd5b5061038e6004803603602081101561047b57600080fd5b50356001600160a01b0316610ea1565b34801561049757600080fd5b5061038e600480360360208110156104ae57600080fd5b50351515610f42565b3480156104c357600080fd5b5061031f610fb4565b3480156104d857600080fd5b5061038e600480360360208110156104ef57600080fd5b50356001600160a01b0316610fd8565b34801561050b57600080fd5b506105146110b6565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561054d57600080fd5b506102c56004803603602081101561056457600080fd5b50356001600160a01b03166110ce565b34801561058057600080fd5b506102c5600480360360a081101561059757600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516611160565b3480156105d157600080fd5b5061031f611281565b3480156105e657600080fd5b506102c56112a5565b3480156105fb57600080fd5b506102c56004803603602081101561061257600080fd5b50356112be565b34801561062557600080fd5b506102c5611311565b34801561063a57600080fd5b506102c56004803603606081101561065157600080fd5b50803590602081013590604001356001600160a01b0316611317565b34801561067957600080fd5b506102c56004803603602081101561069057600080fd5b50356001600160a01b031661139f565b3480156106ac57600080fd5b506103a56116d8565b3480156106c157600080fd5b5061031f6116e1565b3480156106d657600080fd5b5061031f611705565b3480156106eb57600080fd5b5061038e600480360360c081101561070257600080fd5b5080359060208101359060408101359060608101359060808101359060a00135611714565b34801561073357600080fd5b506102c56117f8565b34801561074857600080fd5b5061076f6004803603602081101561075f57600080fd5b50356001600160a01b0316611884565b604080519485526020850193909352838301919091526060830152519081900360800190f35b3480156107a157600080fd5b506102c56118ab565b3480156107b657600080fd5b506107bf6119df565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156107f657600080fd5b506102c56119f1565b34801561080b57600080fd5b5061031f611ab4565b34801561082057600080fd5b506102c5611ac3565b34801561083557600080fd5b5061031f611cc0565b34801561084a57600080fd5b506102c5611ce4565b34801561085f57600080fd5b506102c5611d29565b34801561087457600080fd5b5061031f611da3565b34801561088957600080fd5b506102c5611dc7565b34801561089e57600080fd5b506102c5611dcd565b60075481565b6000806108b9836110ce565b6001600160a01b03841660009081526014602052604090205490915061271082106108e6578092506108ff565b6108fc6127106108f68385611dd3565b90611e35565b92505b5050919050565b6000546001600160a01b031681565b600061094861093a620f42406108f661092c611d29565b6109346119f1565b90611dd3565b6109426119f1565b90611e77565b905090565b6000546001600160a01b031633146109ac576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6008546109c2906103e8906108f690601e611dd3565b831115610a16576040805162461bcd60e51b815260206004820152601360248201527f496e6372656d656e7420746f6f206c6172676500000000000000000000000000604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905260608501829052436080909501859052600d805460ff19169091179055600e92909255600f55601055601155565b601354610100900460ff1681565b6000546001600160a01b03163314610ace576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000826002811115610adc57fe5b1415610b2d57612710811015610b235760405162461bcd60e51b81526004018080602001828103825260248152602001806133d26024913960400191505060405180910390fd5b6009819055610bbc565b6001826002811115610b3b57fe5b1415610ba2576103e8811115610b98576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b600b819055610bbc565b6002826002811115610bb057fe5b1415610bbc57600c8190555b5050565b6000806001600160a01b038416610c2c576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016904780156108fc02916000818181858888f19350505050158015610c26573d6000803e3d6000fd5b50610ce5565b610c416001600160a01b038516333088611ed1565b836001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050506040513d6020811015610ce257600080fd5b50505b6040805160208082018890526001600160a01b03808816838501527f0000000000000000000000000000000000000000000000000000000000000000811660608401528087166080808501919091528451808503909101815260a08401948590527fc20fd7a20000000000000000000000000000000000000000000000000000000090945260a48301828152845160c485015284517f00000000000000000000000000000000000000000000000000000000000000009092169363c20fd7a2938693839260e4019185019080838360005b83811015610dce578181015183820152602001610db6565b50505050905090810190601f168015610dfb5780820380516001836020036101000a031916815260200191505b50925050506040805180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b505050506040513d6040811015610e4357600080fd5b508051602091820151604080516001600160a01b038416815293840182905280519296509094507fb854df037407615523ac9e42e11c9bf6aa3f93c43a0647f04f6f5814d37c39e0928290030190a150935093915050565b60045481565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f085760405162461bcd60e51b815260040180806020018281038252603481526020018061335a6034913960400191505060405180910390fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610fa1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6013805460ff1916911515919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314611037576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661107c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613466602a913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600d54600e54600f5460105460115460ff9094169385565b60006110d86132a5565b506001600160a01b0382166000908152601460209081526040808320815160808101835281548152600182015493810193909352600281015491830182905260030154606083015290919061112e904390611f4a565b602083015190915080156111535761114c816108f684612710611dd3565b9350611158565b600093505b505050919050565b60006001600160a01b0382166111a75760405162461bcd60e51b81526004018080602001828103825260238152602001806134196023913960400191505060405180910390fd5b6000806111b5888787610bc0565b915091506111e3337f0000000000000000000000000000000000000000000000000000000000000000611f8c565b6001600160a01b0382166112285760405162461bcd60e51b81526004018080602001828103825260238152602001806133f66023913960400191505060405180910390fd5b600081116112675760405162461bcd60e51b81526004018080602001828103825260278152602001806132e06027913960400191505060405180910390fd5b611275818884876000612028565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109486112b2611ce4565b60055490611f4a565b90565b6000806112e364174876e8006108f66112de866112d96119f1565b61288a565b612a0c565b9050611308611301620f42406108f66112fa611d29565b8590611dd3565b8290611f4a565b9150505b919050565b60035481565b60006001600160a01b038216611374576040805162461bcd60e51b815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b6113978484600160009054906101000a90046001600160a01b0316856001612028565b949350505050565b60006113a96132a5565b506001600160a01b0382166000908152601460209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152906113fc846110ce565b90506127108110611531576001600160a01b03841660008181526014602090815260408083208381556001810184905560028101849055600301839055855181519485529184019190915282810191909152517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b19181900360600190a1815115611528577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8584600001516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b505050506040513d602081101561152557600080fd5b50505b5051905061130c565b815160009061154890612710906108f69085611dd3565b9050604051806080016040528061156c838660000151611f4a90919063ffffffff16565b815260200161159661158b866040015143611f4a90919063ffffffff16565b602087015190611f4a565b8152436020808301919091526060808701516040938401526001600160a01b03891660008181526014845284902085518082558685015160018301558686015160028301559583015160039091015583519081529182018590528183019390935290517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a180156116ce577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050506040513d60208110156116cb57600080fd5b50505b925061130c915050565b60135460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000546001600160a01b03163314611773576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b85156117b05760405162461bcd60e51b815260040180806020018281038252602d815260200180613307602d913960400191505060405180910390fd5b6040805160a0810182528781526020810187905290810185905260608101849052608001829052600895909555600993909355600a91909155600b55600c5560055543600655565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611877576040805162461bcd60e51b815260206004820152601760248201527f4f6e6c79207375627369647920636f6e74726f6c6c6572000000000000000000604482015290519081900360640190fd5b5060078054600090915590565b60146020526000908152604090208054600182015460028301546003909301549192909184565b6000610948670de0b6b3a76400006108f66112de6119557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561191b57600080fd5b505afa15801561192f573d6000803e3d6000fd5b505050506040513d602081101561194557600080fd5b505160ff16600a0a6109346112a5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d60208110156119d857600080fd5b505161288a565b600854600954600a54600b54600c5485565b6000611aa0611a8960057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d6020811015611a7e57600080fd5b505160ff1690611f4a565b600a0a6108f6611a976118ab565b60085490611dd3565b600a549091508110156112bb5750600a5490565b6001546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1f57600080fd5b505afa158015611b33573d6000803e3d6000fd5b505050506040513d6020811015611b4957600080fd5b5051604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b158015611bc857600080fd5b505afa158015611bdc573d6000803e3d6000fd5b505050506040513d6020811015611bf257600080fd5b505160ff16600a0a670de0b6b3a764000002811115611ca3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6457600080fd5b505afa158015611c78573d6000803e3d6000fd5b505050506040513d6020811015611c8e57600080fd5b505160ff16600a0a670de0b6b3a76400000290505b600b54611cba90620186a0906108f6908490611dd3565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080611cfc60065443611f4a90919063ffffffff16565b600954600554919250611d13916108f69084611dd3565b9150600554821115611d255760055491505b5090565b601254600090815b81811015611d9e5760128181548110611d4657fe5b9060005260206000209060020201600001546003541080611d6957506001820381145b15611d965760128181548110611d7b57fe5b906000526020600020906002020160010154925050506112bb565b600101611d31565b505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065481565b60055481565b600082611de257506000611e2f565b82820282848281611def57fe5b0414611e2c5760405162461bcd60e51b815260040180806020018281038252602181526020018061338e6021913960400191505060405180910390fd5b90505b92915050565b6000611e2c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a24565b600082820183811015611e2c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd00000000000000000000000000000000000000000000000000000000179052611f44908590612ac6565b50505050565b6000611e2c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612b77565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611fdb57600080fd5b505afa158015611fef573d6000803e3d6000fd5b505050506040513d602081101561200557600080fd5b505190508015612023576120236001600160a01b0383168483612bd1565b505050565b6000612032612c23565b600c54600554111561208b576040805162461bcd60e51b815260206004820152601460248201527f4d61782063617061636974792072656163686564000000000000000000000000604482015290519081900360640190fd5b6000612095610915565b9050808610156120d65760405162461bcd60e51b81526004018080602001828103825260238152602001806133af6023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d1b317e5878a6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561214d57600080fd5b505afa158015612161573d6000803e3d6000fd5b505050506040513d602081101561217757600080fd5b50519050600061218682612c37565b905060647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121e357600080fd5b505afa1580156121f7573d6000803e3d6000fd5b505050506040513d602081101561220d57600080fd5b505160ff16600a0a8161221c57fe5b04811015612271576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604482015290519081900360640190fd5b6122b06040518060400160405280600f81526020017f3d3d3d736f6c2d7061796f75743a3a000000000000000000000000000000000081525082612c51565b6122b8611ac3565b81111561230c576040805162461bcd60e51b815260206004820152600e60248201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604482015290519081900360640190fd5b6123806040518060400160405280601181526020017f3d3d3d736f6c2d7061796f75742d313a3a0000000000000000000000000000008152506040518060400160405280600281526020017f6f6b000000000000000000000000000000000000000000000000000000000000815250612d18565b841561239b5761239b6001600160a01b03881633308c611ed1565b60135460009060ff1615612452576123c2620f42406108f66123bb611d29565b8d90611dd3565b9050801561244d576002546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018490529051918a169163a9059cbb916044808201926020929091908290030181600087803b15801561242057600080fd5b505af1158015612434573d6000803e3d6000fd5b505050506040513d602081101561244a57600080fd5b50505b612467565b612464620f42406108f66112fa611d29565b90505b876001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008c6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156124de57600080fd5b505af11580156124f2573d6000803e3d6000fd5b505050506040513d602081101561250857600080fd5b50506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630efe6a8b896125448d85611f4a565b856040518463ffffffff1660e01b815260040180846001600160a01b031681526020018381526020018281526020019350505050600060405180830381600087803b15801561259257600080fd5b505af11580156125a6573d6000803e3d6000fd5b505060135460ff161591505080156125bd57508015155b15612666576002546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b15801561263957600080fd5b505af115801561264d573d6000803e3d6000fd5b505050506040513d602081101561266357600080fd5b50505b6005546126739084611e77565b60055560135460ff161561271057604080516080810182526001600160a01b03891660009081526014602052919091205481906126b09085611e77565b815260095460208201524360408201526060016126cb610915565b90526001600160a01b038816600090815260146020908152604091829020835181559083015160018201559082015160028201556060909101516003909101556127a4565b6040805160808101909152806127486127298585611f4a565b6001600160a01b038b1660009081526014602052604090205490611e77565b81526009546020820152436040820152606001612763610915565b90526001600160a01b038816600090815260146020908152604091829020835181559083015160018201559082015160028201556060909101516003909101555b7fb7ce5a2d90f1705ca02547b0eb827724683e0df3b809477ae4326d0eefed0bc08a836127df60086001015443611e7790919063ffffffff16565b60408051938452602084019290925282820152519081900360600190a17f2cb17bd1fd2a1fecfefae2de1e6a59194abaa62179652924ccdca01617f0bf16612825612e3e565b61282d6118ab565b6040805192835260208301919091528051918290030190a1600354612852908b611e77565b6003556004546128629083611e77565b6004556007546128729083611e77565b60075561287d612ec7565b5098975050505050505050565b6128926132cd565b600082116128d15760405162461bcd60e51b81526004018080602001828103825260268152602001806133346026913960400191505060405180910390fd5b826128eb5750604080516020810190915260008152611e2f565b71ffffffffffffffffffffffffffffffffffff831161299257600082607085901b8161291357fe5b0490506001600160e01b03811115612972576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611e2f565b60006129ae846e01000000000000000000000000000085612fa7565b90506001600160e01b03811115612972576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b60008183612ab05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a75578181015183820152602001612a5d565b50505050905090810190601f168015612aa25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612abc57fe5b0495945050505050565b6060612b1b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130479092919063ffffffff16565b80519091501561202357808060200190516020811015612b3a57600080fd5b50516120235760405162461bcd60e51b815260040180806020018281038252602a81526020018061343c602a913960400191505060405180910390fd5b60008184841115612bc95760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612a75578181015183820152602001612a5d565b505050900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612023908490612ac6565b612c2e6112b2611ce4565b60055543600655565b6000611e2f64174876e8006108f66112de856112d96119f1565b610bbc82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612c9c578181015183820152602001612c84565b50505050905090810190601f168015612cc95780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03167f9710a9d000000000000000000000000000000000000000000000000000000000179052935061305692505050565b610bbc8282604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015612d61578181015183820152602001612d49565b50505050905090810190601f168015612d8e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612dc1578181015183820152602001612da9565b50505050905090810190601f168015612dee5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03167f4b5c42770000000000000000000000000000000000000000000000000000000017905294506130569350505050565b6000612ea1611a8960057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5457600080fd5b600a54909150811015612eb75750600a546112bb565b600a54156112bb576000600a5590565b601054601154600091612eda9190611e77565b600e5490915015801590612eee5750804310155b15612fa457600854600d5460ff1615612f2857600e54600854612f1091611e77565b6008819055600f5411612f23576000600e555b612f4a565b600e54600854612f3791611f4a565b6008819055600f5410612f4a576000600e555b43601155600854600e54600d546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a9181900360800190a1505b50565b6000806000612fb68686613077565b9150915060008480612fc457fe5b868809905082811115612fd8576001820391505b8083039250848210613031576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b61303c8383876130c2565b979650505050505050565b60606113978484600085613132565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848609905083850292508281039150828110156130ba576001820391505b509250929050565b600081810382168083816130d257fe5b0492508085816130de57fe5b0494508081600003816130ed57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061313d8561329f565b61318e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106131cd5780518252601f1990920191602091820191016131ae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461322f576040519150601f19603f3d011682016040523d82523d6000602084013e613234565b606091505b509150915081156132485791506113979050565b8051156132585780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315612a75578181015183820152602001612a5d565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040805160208101909152600081529056fe6465706f7369745769746841737365743a20496e73756666696369656e74206c70416d6f756e745f636f6e74726f6c5661726961626c65206d757374206265203020666f7220696e697469616c697a6174696f6e4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f6368616e67654f6c7954726561737572793a204f6e6c792044414f2063616e207265706c616365204f4c595f5452454153555259536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572736465706f7369745769746841737365743a20496e76616c6964206c70416464726573736465706f7369745769746841737365743a20496e76616c6964206465706f7369746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f2061646472657373a264697066735822122078c6aeee78925a55efaa26b95f78025c35bbaf84086f09d4313ac7557445c2b964736f6c63430007050033466163746f72793a2068656c706572206d757374206e6f74206265207a65726f206164647265737374696572206c656e67746820616e6420666565206c656e677468206e6f74207468652073616d65466163746f72793a207061796f7574546f6b656e206d757374206e6f74206265207a65726f2061646472657373466163746f72793a20696e697469616c4f776e6572206d757374206e6f74206265207a65726f2061646472657373466163746f72793a20637573746f6d5472656173757279206d757374206e6f74206265207a65726f2061646472657373466163746f72793a2044414f206d757374206e6f74206265207a65726f2061646472657373466163746f72793a206f6c795472656173757279206d757374206e6f74206265207a65726f2061646472657373466163746f72793a2073756273696479526f75746572206d757374206e6f74206265207a65726f2061646472657373466163746f72793a207072696e636970616c546f6b656e206d757374206e6f74206265207a65726f206164647265737360a060405234801561001057600080fd5b50604051610ea2380380610ea28339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b031916331790556001600160a01b0382166100935760405162461bcd60e51b8152600401808060200182810382526034815260200180610e6e6034913960400191505060405180910390fd5b6001600160601b0319606083901b166080526001600160a01b0381166100ea5760405162461bcd60e51b8152600401808060200182810382526035815260200180610e396035913960400191505060405180910390fd5b600080546001600160a01b039092166001600160a01b03199092169190911790555060805160601c610d016101386000398061025c528061033d528061045e528061052a5250610d016000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634efa82b61161005b5780634efa82b614610145578063d1b317e51461014d578063d9caed121461018b578063f95c2306146101c157610088565b80630505c8c91461008d5780630efe6a8b146100b157806324705db3146100e55780633bfdd7de1461011f575b600080fd5b6100956101e7565b604080516001600160a01b039092168252519081900360200190f35b6100e3600480360360608110156100c757600080fd5b506001600160a01b0381351690602081013590604001356101f6565b005b61010b600480360360208110156100fb57600080fd5b50356001600160a01b0316610369565b604080519115158252519081900360200190f35b6100e36004803603602081101561013557600080fd5b50356001600160a01b031661037e565b61009561045c565b6101796004803603604081101561016357600080fd5b506001600160a01b038135169060200135610480565b60408051918252519081900360200190f35b6100e3600480360360608110156101a157600080fd5b506001600160a01b038135811691602081013590911690604001356105b7565b6100e3600480360360208110156101d757600080fd5b50356001600160a01b0316610679565b6000546001600160a01b031681565b3360009081526001602052604090205460ff166102445760405162461bcd60e51b8152600401808060200182810382526021815260200180610c576021913960400191505060405180910390fd5b6102596001600160a01b03841633308561075f565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d60208110156102f157600080fd5b505110156103305760405162461bcd60e51b8152600401808060200182810382526029815260200180610c0d6029913960400191505060405180910390fd5b6103646001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836107ed565b505050565b60016020526000908152604090205460ff1681565b6000546001600160a01b031633146103dd576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166104225760405162461bcd60e51b815260040180806020018281038252602a815260200180610ca2602a913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006105b0836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216600a0a916105aa916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b505050506040513d602081101561059b57600080fd5b5051859060ff16600a0a61086d565b906108cf565b9392505050565b6000546001600160a01b03163314610616576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61062a6001600160a01b03841683836107ed565b604080516001600160a01b0380861682528416602082015280820183905290517f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360600190a1505050565b6000546001600160a01b031633146106d8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff91821615179182905583519485521615159083015280517f661abc66f13f27ca765c6a753171d10aa4861f03f1b506c5b1297a2dc80cf8ee9281900390910190a150565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526107e7908590610911565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610364908490610911565b60008261087c575060006108c9565b8282028284828161088957fe5b04146108c65760405162461bcd60e51b8152600401808060200182810382526021815260200180610c366021913960400191505060405180910390fd5b90505b92915050565b60006105b083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506109c2565b6060610966826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a649092919063ffffffff16565b8051909150156103645780806020019051602081101561098557600080fd5b50516103645760405162461bcd60e51b815260040180806020018281038252602a815260200180610c78602a913960400191505060405180910390fd5b60008183610a4e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a135781810151838201526020016109fb565b50505050905090810190601f168015610a405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610a5a57fe5b0495945050505050565b6060610a738484600085610a7b565b949350505050565b6060610a8685610c06565b610ad7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610b3457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610af7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610b96576040519150601f19603f3d011682016040523d82523d6000602084013e610b9b565b606091505b50915091508115610baf579150610a739050565b805115610bbf5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610a135781810151838201526020016109fb565b3b15159056fe6465706f7369743a20496e73756666696369656e74207061796f7574546f6b656e2062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f74206120626f6e6420636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f2061646472657373a2646970667358221220494879bf3977c4c04bdb0c4967c99fdfa95fe97954d72add7d535d39e2e039ff64736f6c63430007050033437573746f6d54726561737572793a20696e697469616c4f776e6572206d757374206e6f74206265207a65726f2061646472657373437573746f6d54726561737572793a207061796f7574546f6b656e206d757374206e6f74206265207a65726f20616464726573737365745469657273416e64466565733a20666565206d7573742067726561746572207468616e20307365745469657273416e64466565733a2074696572206c656e67746820616e6420666565206c656e677468206d7573742062652073616d65637265617465426f6e64416e6454726561737572793a2066656573206d7573742062652073657475704f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f2061646472657373a26469706673582212204b20534f250830b9ce5f86718d879c20915e5a92bc0aa292314535a56fe6a3a564736f6c63430007050033466163746f72793a2068656c706572206d757374206e6f74206265207a65726f2061646472657373466163746f72793a207472656173757279206d757374206e6f74206265207a65726f2061646472657373466163746f72793a2073756273696479526f75746572206d757374206e6f74206265207a65726f2061646472657373466163746f72793a2064616f206d757374206e6f74206265207a65726f2061646472657373466163746f72793a20666163746f727953746f72616765206d757374206e6f74206265207a65726f2061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBond(address,address,address,address)": {
        "params": {
          "_customTreasury": "address",
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      },
      "createBondAndTreasury(address,address,address)": {
        "params": {
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      },
      "setTiersAndFees(uint256[],uint256[])": {
        "params": {
          "_fees": "uint[]",
          "_tierCeilings": "uint[]"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBond(address,address,address,address)": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      },
      "createBondAndTreasury(address,address,address)": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      },
      "setTiersAndFees(uint256[],uint256[])": {
        "notice": "set fee for creating bond"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13535,
        "contract": "src/bonding/Factory.sol:Factory",
        "label": "policy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9998,
        "contract": "src/bonding/Factory.sol:Factory",
        "label": "tierCeilings",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10001,
        "contract": "src/bonding/Factory.sol:Factory",
        "label": "fees",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}